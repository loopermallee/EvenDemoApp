name: Flutter CI (Debug + Release with Smart Issues + Cache)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-android:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'

      - name: Cache Flutter dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            build
          key: ${{ runner.os }}-flutter-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Install dependencies
        run: flutter pub get

      - name: Build Android APK (Debug)
        id: build_debug
        run: |
          set -o pipefail
          echo "🔨 Starting Flutter Debug build..."
          flutter build apk --debug 2>&1 | tee build-debug-log.txt
          echo "✅ Debug build finished"

      - name: Build Android APK (Release)
        id: build_release
        run: |
          set -o pipefail
          echo "🔨 Starting Flutter Release build..."
          flutter build apk --release 2>&1 | tee build-release-log.txt
          echo "✅ Release build finished"

      - name: Create formatted issue body on failure
        if: failure()
        run: |
          echo "# 🚨 CI Build Failure Report" > issue-body.md
          echo "" >> issue-body.md
          echo "**Build failed on:** \`${GITHUB_REF_NAME}\` branch" >> issue-body.md
          echo "**Commit:** [\`${GITHUB_SHA}\`](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA})" >> issue-body.md
          echo "**Workflow:** [${GITHUB_WORKFLOW}](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID})" >> issue-body.md
          echo "**Triggered by:** ${GITHUB_EVENT_NAME} (${GITHUB_ACTOR})" >> issue-body.md
          echo "**Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> issue-body.md
          echo "" >> issue-body.md

          echo "## ❌ Debug Build Output (last 50 lines)" >> issue-body.md
          echo '```' >> issue-body.md
          tail -n 50 build-debug-log.txt >> issue-body.md
          echo '```' >> issue-body.md
          echo "" >> issue-body.md

          echo "## ❌ Release Build Output (last 50 lines)" >> issue-body.md
          echo '```' >> issue-body.md
          tail -n 50 build-release-log.txt >> issue-body.md
          echo '```' >> issue-body.md
          echo "" >> issue-body.md

          echo "## 🔍 Key Errors (extracted)" >> issue-body.md
          echo '```' >> issue-body.md
          grep -i "error\|exception\|failed\|fatal" build-debug-log.txt | tail -20 >> issue-body.md || echo "No debug errors found" >> issue-body.md
          grep -i "error\|exception\|failed\|fatal" build-release-log.txt | tail -20 >> issue-body.md || echo "No release errors found" >> issue-body.md
          echo '```' >> issue-body.md

      - name: Create GitHub Issue with formatted content
        if: failure()
        uses: peter-evans/create-issue-from-file@v5
        with:
          title: "🚨 CI Build Failure - ${{ github.ref_name }} (${{ github.sha }})"
          content-filepath: issue-body.md
          labels: |
            bug
            ci-failure
            auto-generated
            ${{ github.ref_name }}
          assignees: ${{ github.actor }}

      - name: Upload artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-failure-artifacts-${{ github.sha }}
          path: |
            build-debug-log.txt
            build-release-log.txt
            issue-body.md
          retention-days: 7

      # Auto-close resolved CI failure issues
      - name: Auto-close resolved CI failure issues
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'ci-failure,auto-generated'
            });

            for (const issue of issues.data) {
              if (issue.title.includes(process.env.GITHUB_REF_NAME) ||
                  issue.title.includes(process.env.GITHUB_SHA)) {
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed',
                  body: "✅ CI build has passed for this branch/commit. Closing issue automatically."
                });
                console.log(`Closed resolved CI issue #${issue.number}`);
              }
            }